package protocol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *EventMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MessageBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MessageBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "message_type":
					{
						var zb0003 int32
						zb0003, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "MessageBase", "Type")
							return
						}
						z.MessageBase.Type = MessageType(zb0003)
					}
				case "msg_id":
					z.MessageBase.MsgId, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "MessageBase", "MsgId")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MessageBase")
						return
					}
				}
			}
		case "method":
			z.Method, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "params":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0004) {
				z.Params = (z.Params)[:zb0004]
			} else {
				z.Params = make([]interface{}, zb0004)
			}
			for za0001 := range z.Params {
				z.Params[za0001], err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EventMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "MessageBase"
	err = en.Append(0x83, 0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "message_type"
	err = en.Append(0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.MessageBase.Type))
	if err != nil {
		err = msgp.WrapError(err, "MessageBase", "Type")
		return
	}
	// write "msg_id"
	err = en.Append(0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MessageBase.MsgId)
	if err != nil {
		err = msgp.WrapError(err, "MessageBase", "MsgId")
		return
	}
	// write "method"
	err = en.Append(0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	// write "params"
	err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	for za0001 := range z.Params {
		err = en.WriteIntf(z.Params[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EventMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "MessageBase"
	o = append(o, 0x83, 0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "message_type"
	o = append(o, 0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt32(o, int32(z.MessageBase.Type))
	// string "msg_id"
	o = append(o, 0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.MessageBase.MsgId)
	// string "method"
	o = append(o, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.Method)
	// string "params"
	o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Params)))
	for za0001 := range z.Params {
		o, err = msgp.AppendIntf(o, z.Params[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MessageBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MessageBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "message_type":
					{
						var zb0003 int32
						zb0003, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "MessageBase", "Type")
							return
						}
						z.MessageBase.Type = MessageType(zb0003)
					}
				case "msg_id":
					z.MessageBase.MsgId, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MessageBase", "MsgId")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MessageBase")
						return
					}
				}
			}
		case "method":
			z.Method, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "params":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0004) {
				z.Params = (z.Params)[:zb0004]
			} else {
				z.Params = make([]interface{}, zb0004)
			}
			for za0001 := range z.Params {
				z.Params[za0001], bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EventMessage) Msgsize() (s int) {
	s = 1 + 12 + 1 + 13 + msgp.Int32Size + 7 + msgp.Uint32Size + 7 + msgp.StringPrefixSize + len(z.Method) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Params {
		s += msgp.GuessSize(z.Params[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageBase) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "message_type":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = MessageType(zb0002)
			}
		case "msg_id":
			z.MsgId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MsgId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessageBase) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "message_type"
	err = en.Append(0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "msg_id"
	err = en.Append(0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MsgId)
	if err != nil {
		err = msgp.WrapError(err, "MsgId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessageBase) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "message_type"
	o = append(o, 0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt32(o, int32(z.Type))
	// string "msg_id"
	o = append(o, 0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.MsgId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageBase) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "message_type":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = MessageType(zb0002)
			}
		case "msg_id":
			z.MsgId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessageBase) Msgsize() (s int) {
	s = 1 + 13 + msgp.Int32Size + 7 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessageType) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RequestMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MessageBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MessageBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "message_type":
					{
						var zb0003 int32
						zb0003, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "MessageBase", "Type")
							return
						}
						z.MessageBase.Type = MessageType(zb0003)
					}
				case "msg_id":
					z.MessageBase.MsgId, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "MessageBase", "MsgId")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MessageBase")
						return
					}
				}
			}
		case "method":
			z.Method, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "params":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0004) {
				z.Params = (z.Params)[:zb0004]
			} else {
				z.Params = make([]interface{}, zb0004)
			}
			for za0001 := range z.Params {
				z.Params[za0001], err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RequestMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "MessageBase"
	err = en.Append(0x83, 0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "message_type"
	err = en.Append(0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.MessageBase.Type))
	if err != nil {
		err = msgp.WrapError(err, "MessageBase", "Type")
		return
	}
	// write "msg_id"
	err = en.Append(0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MessageBase.MsgId)
	if err != nil {
		err = msgp.WrapError(err, "MessageBase", "MsgId")
		return
	}
	// write "method"
	err = en.Append(0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	// write "params"
	err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	for za0001 := range z.Params {
		err = en.WriteIntf(z.Params[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RequestMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "MessageBase"
	o = append(o, 0x83, 0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "message_type"
	o = append(o, 0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt32(o, int32(z.MessageBase.Type))
	// string "msg_id"
	o = append(o, 0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.MessageBase.MsgId)
	// string "method"
	o = append(o, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.Method)
	// string "params"
	o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Params)))
	for za0001 := range z.Params {
		o, err = msgp.AppendIntf(o, z.Params[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RequestMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MessageBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MessageBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "message_type":
					{
						var zb0003 int32
						zb0003, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "MessageBase", "Type")
							return
						}
						z.MessageBase.Type = MessageType(zb0003)
					}
				case "msg_id":
					z.MessageBase.MsgId, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MessageBase", "MsgId")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MessageBase")
						return
					}
				}
			}
		case "method":
			z.Method, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "params":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0004) {
				z.Params = (z.Params)[:zb0004]
			} else {
				z.Params = make([]interface{}, zb0004)
			}
			for za0001 := range z.Params {
				z.Params[za0001], bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RequestMessage) Msgsize() (s int) {
	s = 1 + 12 + 1 + 13 + msgp.Int32Size + 7 + msgp.Uint32Size + 7 + msgp.StringPrefixSize + len(z.Method) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Params {
		s += msgp.GuessSize(z.Params[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResponseMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MessageBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MessageBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "message_type":
					{
						var zb0003 int32
						zb0003, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "MessageBase", "Type")
							return
						}
						z.MessageBase.Type = MessageType(zb0003)
					}
				case "msg_id":
					z.MessageBase.MsgId, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "MessageBase", "MsgId")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MessageBase")
						return
					}
				}
			}
		case "method":
			z.Error, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "result":
			z.Result, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Result")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ResponseMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "MessageBase"
	err = en.Append(0x83, 0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "message_type"
	err = en.Append(0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.MessageBase.Type))
	if err != nil {
		err = msgp.WrapError(err, "MessageBase", "Type")
		return
	}
	// write "msg_id"
	err = en.Append(0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MessageBase.MsgId)
	if err != nil {
		err = msgp.WrapError(err, "MessageBase", "MsgId")
		return
	}
	// write "method"
	err = en.Append(0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	// write "result"
	err = en.Append(0xa6, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Result)
	if err != nil {
		err = msgp.WrapError(err, "Result")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ResponseMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "MessageBase"
	o = append(o, 0x83, 0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "message_type"
	o = append(o, 0x82, 0xac, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt32(o, int32(z.MessageBase.Type))
	// string "msg_id"
	o = append(o, 0xa6, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.MessageBase.MsgId)
	// string "method"
	o = append(o, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o, err = msgp.AppendIntf(o, z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	// string "result"
	o = append(o, 0xa6, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74)
	o, err = msgp.AppendIntf(o, z.Result)
	if err != nil {
		err = msgp.WrapError(err, "Result")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResponseMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MessageBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MessageBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "message_type":
					{
						var zb0003 int32
						zb0003, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "MessageBase", "Type")
							return
						}
						z.MessageBase.Type = MessageType(zb0003)
					}
				case "msg_id":
					z.MessageBase.MsgId, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MessageBase", "MsgId")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MessageBase")
						return
					}
				}
			}
		case "method":
			z.Error, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "result":
			z.Result, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Result")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ResponseMessage) Msgsize() (s int) {
	s = 1 + 12 + 1 + 13 + msgp.Int32Size + 7 + msgp.Uint32Size + 7 + msgp.GuessSize(z.Error) + 7 + msgp.GuessSize(z.Result)
	return
}
